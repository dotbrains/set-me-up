#!/bin/bash
#
# This is a rather minimal example Argbash potential
# Example taken from http://argbash.readthedocs.io/en/stable/example.html
#
# ARG_OPTIONAL_BOOLEAN([selfupdate],[],[Update dev-setup],[])
# ARG_OPTIONAL_BOOLEAN([provision],[p],[Provision with given modules (default all)],[off])
# ARG_OPTIONAL_REPEATED([modules],[m],[Modules to provision, all if none given])
# ARG_HELP([dev-setup installer])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.6.1 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate

die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}

begins_with_short_option()
{
	local first_option all_short_options
	all_short_options='pmh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}



# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_selfupdate="off"
_arg_provision="off"
_arg_modules=()

print_help ()
{
	printf '%s\n' "dev-setup installer"
	printf 'Usage: %s [--(no-)selfupdate] [-p|--(no-)provision] [-m|--modules <arg>] [-h|--help]\n' "$0"
	printf '\t%s\n' "--selfupdate,--no-selfupdate: Update dev-setup (off by default)"
	printf '\t%s\n' "-p,--provision,--no-provision: Provision with given modules (default all) (off by default)"
	printf '\t%s\n' "-m,--modules: Modules to provision, all if none given (empty by default)"
	printf '\t%s\n' "-h,--help: Prints help"
}

parse_commandline ()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--no-selfupdate|--selfupdate)
				_arg_selfupdate="on"
				test "${1:0:5}" = "--no-" && _arg_selfupdate="off"
				;;
			-p|--no-provision|--provision)
				_arg_provision="on"
				test "${1:0:5}" = "--no-" && _arg_provision="off"
				;;
			-p*)
				_arg_provision="on"
				_next="${_key##-p}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					begins_with_short_option "$_next" && shift && set -- "-p" "-${_next}" "$@" || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-m|--modules)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_modules+=("$2")
				shift
				;;
			--modules=*)
				_arg_modules+=("${_key##--modules=}")
				;;
			-m*)
				_arg_modules+=("${_key##-m}")
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

readonly SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

if [[ -e "${SCRIPT_DIR}/.dotfiles/tag-dev-setup/dev-setup" ]]; then
    echo "Development mode"
    readonly PREFIX_PATH="${SCRIPT_DIR}/.dotfiles/tag-dev-setup/dev-setup"
else
    readonly PREFIX_PATH=".dev-setup"
fi


provision_enabled() {
    [[ ${_arg_provision} == "on" ]]
}

export _arg_provision
export -f provision_enabled

start_sudo() {
    sudo -v
    ( while true; do sudo -v; sleep 60; done; ) &
    SUDO_PID="$!"
    trap stop_sudo SIGINT SIGTERM
}

stop_sudo() {
    kill "$SUDO_PID"
    trap - SIGINT SIGTERM
    sudo -k
}

provision_module() {
    local -r module_path="${PREFIX_PATH}/modules"
    local -r module_script="${1}.sh"
    local -r requires_sudo=("macos" "macosupdate")

    if [[ ! -e "${module_path}/${module_script}" ]]; then
        echo "${module_path}/${module_script} does not seem to exist, skipping."
        false
        return
    fi

    echo "Running ${module_path}/${module_script} module"

    if [[ " ${requires_sudo[@]} " =~ " ${1}" ]]; then
        provision_enabled && ( cd ${module_path} && start_sudo && ${module_script} && stop_sudo )
    else
        provision_enabled && ( cd "${module_path}/" && source "./${module_script}" )
    fi
}

# Run everything from home directory
(
    cd ~

    if [[ ${_arg_selfupdate} == "on" ]]; then
        ${PREFIX_PATH}/update.sh

        ! provision_enabled && exit 0
    fi

    if ! provision_enabled ; then
        _PRINT_HELP=yes die "Please provide the --provision switch to run dev-setup." 1
        exit 0
    fi

    read -p "dev-setup may overwrite existing files in your home directory. Are you sure? (y/n) " -n 1;
    echo "";
    [[ ! $REPLY =~ ^[Yy]$ ]] && exit 0

    [[ ${#_arg_modules[@]} = 0 || " ${_arg_modules[@]} " =~ " all " ]] && modules=("macosupdate" "macos" "essentials" "terminal") || modules=("${_arg_modules[@]}")

    # 99% of our modules are not usable without homebrew and a proper dotfiles setup so we always run the base module
    # modules=("base" "${modules[@]}")

    # check if macosupdate is contained in module list and if so queue it at the beginning
    if [[ " ${modules[@]} " =~ " macosupdate " ]]; then
        _tmp_modules=()

        for module in "${modules[@]}"
        do
            [[ ${module} != "macosupdate" ]] && _tmp_modules+=("${module}")
        done

        modules=("macosupdate" "${_tmp_modules[@]}")
    fi

    # run modules
    for module in "${modules[@]}"
    do
        provision_module ${module}
    done

    echo "------------------------------"
    echo "Completed running dev-setup, restart your computer to ensure all updates take effect."
    echo "------------------------------"

)

# ] <-- needed because of Argbash
